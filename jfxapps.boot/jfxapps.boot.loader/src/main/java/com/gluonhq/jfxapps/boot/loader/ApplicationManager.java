/*
 * Copyright (c) 2016, 2023, Gluon and/or its affiliates.
 * Copyright (c) 2021, 2023, Pascal Treilhes and/or its affiliates.
 * Copyright (c) 2012, 2014, Oracle and/or its affiliates.
 * All rights reserved. Use is subject to license terms.
 *
 * This file is available and licensed under the following license:
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  - Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the distribution.
 *  - Neither the name of Oracle Corporation and Gluon nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.gluonhq.jfxapps.boot.loader;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;

import com.gluonhq.jfxapps.boot.context.SbContext;
import com.gluonhq.jfxapps.boot.loader.content.ExtensionContentProvider;
import com.gluonhq.jfxapps.boot.loader.content.ExtensionValidation;
import com.gluonhq.jfxapps.boot.loader.extension.EditorExtension;
import com.gluonhq.jfxapps.boot.loader.internal.ApplicationManagerImpl;
import com.gluonhq.jfxapps.boot.loader.model.Application;
import com.gluonhq.jfxapps.boot.maven.client.api.MavenArtifactId;

/**
 * Handle application lifecycle
 */
public interface ApplicationManager {


    /**
     * Create an {@link ApplicationManager} instance
     * @param root hte root folder where the application will store everything
     * @return the instance
     */
    public static ApplicationManager get(Path root) {
        return new ApplicationManagerImpl(root);
    }
    /**
     * Get the current state of the application
     * @return clone of the current state
     */
    public Application getApplicationState();

    /**
     * Check if a state is already saved
     * @return
     */
    boolean hasSavedApplicationState();

    //void saveApplicationState();

    /**
     * load the application state from a stream erasing the previous state.
     * The expected format is a json formatted {@link Application}
     * @param jsonStream
     * @throws IOException
     */
    void loadApplicationStatte(InputStream jsonStream) throws IOException;

    /**
     * load the application state from a list of registry artifacts erasing the previous state.
     * The expected format of the artifact is the one generated by the maven plugin jfxapps.registry:jfxapps-registry-maven-plugin
     * @param registries
     * @throws IOException
     */
    void loadApplicationState(List<MavenArtifactId> registries) throws IOException;

    //void setApplicationState(Application application);


    /**
     * Load the last saved state of the application
     */
    void loadApplicationState();


    /**
     * Download dependencies and create associated {@link ModuleLayer}
     */
    void load();
    /**
     * Download dependencies and create associated {@link ModuleLayer} while notifying the provided {@link ProgressListener}
     * @param progressListener
     */
    void load(ProgressListener progressListener);

    /**
     * Start core components
     * @throws BootException
     */
    void start() throws BootException;
    /**
     * Start core components while notifying the provided {@link ProgressListener}
     * @throws BootException
     */
    void start(ProgressListener progressListener) throws BootException;

    /**
     * Start the sub application
     * @param editorId
     */
    void startEditor(UUID editorId);

    /**
     * Start the sub application while notifying the provided {@link ProgressListener}
     * @param editorId
     * @param progressListener
     */
    void startEditor(UUID editorId, ProgressListener progressListener);

    /**
     * Send a command to the core dispatcher
     * @param parameters
     */
    void send(OpenCommandEvent parameters);
    /**
     * Stop core components
     */
    void stop();

    /**
     * Delete core {@link ModuleLayer} if possible. All other components must be unloaded first to succeed
     */
    void unload();
    void stopEditor(UUID editorId);
    void unloadEditor(UUID editorId);

    void remove(UUID extensionId);
    void disable(UUID extensionId);
    void add(ExtensionContentProvider provider, ExtensionValidation validation);

    ExtensionReport getReport(UUID id);

    Set<EditorExtension> getEditors();
    Optional<SbContext> getContext(UUID extensionId);



}
